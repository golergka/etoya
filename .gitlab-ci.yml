# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
# services:
  # - mysql:latest
  # - postgres:latest

# variables:
  # POSTGRES_DB: database_name

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - ~/.cache/pip/

stages:
  - test

test:
  stage: test
  before_script:
    - python -V                                   # Print out python version for debugging
    - pip install pipenv

  # Uncomment next line if your Django app needs a JS runtime:
  # - apt-get update -q && apt-get install nodejs -yqq
  # - pip install -r requirements.txt

  # To get Django tests to work you may need to create a settings file using
  # the following DATABASES:
  #
  # DATABASES = {
  #     'default': {
  #        'ENGINE': 'django.db.backends.postgresql_psycopg2',
  #        'NAME': 'ci',
  #        'USER': 'postgres',
  #        'PASSWORD': 'postgres',
  #        'HOST': 'postgres',
  #        'PORT': '5432',
  #    },
  # }
  #
  # and then adding `--settings app.settings.ci` (or similar) to the test command

  variables:
    LC_ALL: C.UTF-8
    LANG: C.UTF8
    # DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  script:
    - pipenv install --dev
    - pipenv run coverage run --source='.' manage.py test
    - coverage report -m
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'